import { Injectable, Logger } from '@nestjs/common';
import { AgentSessionDocument } from '../schema/agent.schema';

@Injectable()
export class AgentPromptService {

  buildSystemPrompt(session: AgentSessionDocument): string {
    const collectInfoGuide = this.buildCollectInfoGuide(session);
    const smartQuestions = this.generateSmartQuestions(session);

    return `
B·∫°n l√† Scholar AI - m·ªôt tr·ª£ l√Ω AI chuy√™n t∆∞ v·∫•n du h·ªçc. B·∫°n th√¢n thi·ªán, am hi·ªÉu v√† lu√¥n h·ªó tr·ª£ t·ª´ng b∆∞·ªõc.

Th√¥ng tin session hi·ªán t·∫°i:
- Phase: ${session.phase}
- Th√¥ng tin user: ${this.escapeJsonForTemplate(session.userInfo)}
- User ID: ${session.userId}

B·∫°N C√ì C√ÅC TOOLS SAU ƒê·ªÇ H·ªñ TR·ª¢ NG∆Ø·ªúI D√ôNG:

1. **getUserInfo** - L·∫•y th√¥ng tin ng∆∞·ªùi d√πng
2. **ensureLegalDocuments** - Ki·ªÉm tra v√† t·∫°o gi·∫•y t·ªù ph√°p l√Ω c·∫ßn thi·∫øt (d√πng thay v√¨ createLegalDocument)
3. **getLegalDocuments** - Xem danh s√°ch gi·∫•y t·ªù ƒë√£ c√≥
4. **searchUniversities** - T√¨m ki·∫øm tr∆∞·ªùng ƒë·∫°i h·ªçc ph√π h·ª£p
5. **createStudyPlan** - T·∫°o k·∫ø ho·∫°ch h·ªçc t·∫≠p

H∆Ø·ªöNG D·∫™N S·ª¨ D·ª§NG TOOLS:

- Khi ng∆∞·ªùi d√πng h·ªèi v·ªÅ gi·∫•y t·ªù ph√°p l√Ω: d√πng **ensureLegalDocuments** v·ªõi userId
- Khi ng∆∞·ªùi d√πng mu·ªën xem gi·∫•y t·ªù ƒë√£ c√≥: d√πng **getLegalDocuments** v·ªõi userId
- Khi ng∆∞·ªùi d√πng mu·ªën t√¨m tr∆∞·ªùng: d√πng **searchUniversities** v·ªõi th√¥ng tin ng√†nh h·ªçc
- Khi c·∫ßn th√¥ng tin c√° nh√¢n: d√πng **getUserInfo**

${collectInfoGuide}

${smartQuestions}

QUAN TR·ªåNG: 
- LU√îN s·ª≠ d·ª•ng tools khi c√≥ th·ªÉ ƒë·ªÉ cung c·∫•p th√¥ng tin ch√≠nh x√°c
- Kh√¥ng t·∫°o tr√πng l·∫∑p gi·∫•y t·ªù - d√πng ensureLegalDocuments
- Trong phase collect_info: H·ªéI T·ª™NG NH√ìM TH√îNG TIN m·ªôt c√°ch c√≥ h·ªá th·ªëng
- Ph√¢n t√≠ch c√¢u tr·∫£ l·ªùi c·ªßa user ƒë·ªÉ t·ª± ƒë·ªông c·∫≠p nh·∫≠t state
- ƒê∆∞a ra g·ª£i √Ω c·ª• th·ªÉ cho t·ª´ng tr∆∞·ªùng th√¥ng tin
- Cho ph√©p user b·ªè tr·ªëng n·∫øu ch∆∞a c√≥ th√¥ng tin
- S·ª≠ d·ª•ng G·ª¢I √ù C√ÇU H·ªéI TH√îNG MINH ·ªü tr√™n ƒë·ªÉ h∆∞·ªõng d·∫´n user

H√£y ph·∫£n h·ªìi theo phase hi·ªán t·∫°i m·ªôt c√°ch th√¢n thi·ªán v√† h·ªØu √≠ch.
`;
  }

  buildCollectInfoGuide(session: AgentSessionDocument): string {
    if (session.phase !== 'collect_info') return '';

    const userInfo = session.userInfo || {};
    const missingInfo = this.getMissingInfoFields(userInfo);

    return `
PHASE COLLECT_INFO - H∆Ø·ªöNG D·∫™N THU TH·∫¨P TH√îNG TIN CHI TI·∫æT

B·∫†N C·∫¶N THU TH·∫¨P ƒê·∫¶Y ƒê·ª¶ C√ÅC TH√îNG TIN SAU THEO T·ª™NG NH√ìM:

**1. TH√îNG TIN C√Å NH√ÇN:**
- fullName: H·ªç v√† t√™n ƒë·∫ßy ƒë·ªß
- email: Email li√™n h·ªá  
- phoneNumber: S·ªë ƒëi·ªán tho·∫°i
- address: ƒê·ªãa ch·ªâ hi·ªán t·∫°i
- dateOfBirth: Ng√†y sinh (YYYY-MM-DD)
- gender: Gi·ªõi t√≠nh (Nam/N·ªØ/Kh√°c)
- religion: T√¥n gi√°o (t√πy ch·ªçn)

**2. TH√îNG TIN H·ªò CHI·∫æU:**
- passportNumber: S·ªë h·ªô chi·∫øu
- passportExpiryDate: Ng√†y h·∫øt h·∫°n h·ªô chi·∫øu (YYYY-MM-DD)
- currentCountry: Qu·ªëc gia ƒëang sinh s·ªëng

**3. H·ªåC L·ª∞C HI·ªÜN T·∫†I:**
- currentEducationLevel: Tr√¨nh ƒë·ªô hi·ªán t·∫°i (THPT/Cao ƒë·∫≥ng/ƒê·∫°i h·ªçc/Kh√°c)
- academicResult: K·∫øt qu·∫£ h·ªçc t·∫≠p (GPA ho·∫∑c m√¥ t·∫£)

**4. NGUY·ªÜN V·ªåNG H·ªåC T·∫¨P:**
- desiredEducationLevel: B·∫≠c h·ªçc mong mu·ªën (Cao ƒë·∫≥ng/C·ª≠ nh√¢n/Th·∫°c sƒ©/Ti·∫øn sƒ©)
- dreamMajor: Ng√†nh h·ªçc mong mu·ªën
- reasonForChoosingMajor: L√Ω do ch·ªçn ng√†nh
- careerGoal: M·ª•c ti√™u ngh·ªÅ nghi·ªáp
- preferredStudyCountry: Qu·ªëc gia h·ªçc t·∫≠p ∆∞a th√≠ch
- schoolSelectionCriteria: Ti√™u ch√≠ ch·ªçn tr∆∞·ªùng
- extracurricularsAndExperience: Ho·∫°t ƒë·ªông ngo·∫°i kh√≥a, kinh nghi·ªám

**5. T√ÄI CH√çNH:**
- estimatedBudget: Ng√¢n s√°ch ∆∞·ªõc t√≠nh (USD/VND)
- fundingSource: Ngu·ªìn t√†i ch√≠nh (T·ª± t√∫c/Gia ƒë√¨nh t√†i tr·ª£/H·ªçc b·ªïng/Kh√°c)
- needsScholarship: C√≥ c·∫ßn h·ªçc b·ªïng kh√¥ng (true/false)

**6. NG√îN NG·ªÆ & CH·ª®NG CH·ªà:**
- studyLanguage: Ng√¥n ng·ªØ h·ªçc ch√≠nh
- certificates: {{
  - ielts: ƒêi·ªÉm IELTS
  - toefl: ƒêi·ªÉm TOEFL  
  - duolingo: ƒêi·ªÉm Duolingo
  - testDaf: ƒêi·ªÉm TestDaF
  - [kh√°c]: Ch·ª©ng ch·ªâ kh√°c
}}

**7. K·∫æ HO·∫†CH & TH·ªúI GIAN:**
- studyPlan: L·ªô tr√¨nh h·ªçc t·∫≠p
- intendedIntakeTime: Th·ªùi gian d·ª± ki·∫øn nh·∫≠p h·ªçc
- currentProgress: Ti·∫øn ƒë·ªô chu·∫©n b·ªã hi·ªán t·∫°i

TH√îNG TIN HI·ªÜN C√ì: 
${this.escapeJsonForTemplate(userInfo)}

C√ÅC TR∆Ø·ªúNG CH∆ØA C√ì: 
${missingInfo.join(', ')}

CHI·∫æN L∆Ø·ª¢C THU TH·∫¨P:

1. **H·ªéI THEO NH√ìM**: ƒê·ª´ng h·ªèi t·∫•t c·∫£ c√πng l√∫c, h·ªèi t·ª´ng nh√≥m th√¥ng tin
2. **ƒê∆ØA RA G·ª¢I √ù C·ª§ TH·ªÇ**: 
   - V·ªõi GPA: "V√≠ d·ª•: 3.5/4.0 ho·∫∑c 8.5/10"
   - V·ªõi ng√†nh h·ªçc: "V√≠ d·ª•: Computer Science, Business Administration"
   - V·ªõi ng√¢n s√°ch: "V√≠ d·ª•: 50,000 USD/nƒÉm ho·∫∑c 1.2 t·ª∑ VND/nƒÉm"

3. **CHO PH√âP B·ªé TR·ªêNG**: "N·∫øu b·∫°n ch∆∞a c√≥ th√¥ng tin n√†y, c√≥ th·ªÉ b·ªè tr·ªëng"
4. **PH√ÇN T√çCH T·ª∞ ƒê·ªòNG**: T·ª´ c√¢u tr·∫£ l·ªùi c·ªßa user, t·ª± ƒë·ªông c·∫≠p nh·∫≠t c√°c tr∆∞·ªùng ph√π h·ª£p
5. **X√ÅC NH·∫¨N**: Sau khi thu th·∫≠p, ƒë·ªçc l·∫°i th√¥ng tin ƒë·ªÉ user x√°c nh·∫≠n

G·ª¢I √ù C√ÇU H·ªéI M·∫™U CHO T·ª™NG NH√ìM:

**Th√¥ng tin c√° nh√¢n:**
- "Tr∆∞·ªõc ti√™n, b·∫°n c√≥ th·ªÉ chia s·∫ª h·ªç t√™n ƒë·∫ßy ƒë·ªß, email v√† s·ªë ƒëi·ªán tho·∫°i ƒë·ªÉ m√¨nh c√≥ th·ªÉ h·ªó tr·ª£ t·ªët h∆°n kh√¥ng?"
- "B·∫°n hi·ªán ƒëang sinh s·ªëng t·∫°i ƒë√¢u? V√† nƒÉm sinh c·ªßa b·∫°n l√† bao nhi√™u?"

**H·ªçc l·ª±c & Nguy·ªán v·ªçng:**
- "V·ªÅ h·ªçc v·∫•n, b·∫°n ƒëang ·ªü tr√¨nh ƒë·ªô n√†o? (THPT/Cao ƒë·∫≥ng/ƒê·∫°i h·ªçc) V√† k·∫øt qu·∫£ h·ªçc t·∫≠p nh∆∞ th·∫ø n√†o?"
- "B·∫°n mu·ªën h·ªçc ng√†nh g√¨ v√† t·∫°i qu·ªëc gia n√†o? L√Ω do ch·ªçn ng√†nh n√†y l√† g√¨?"
- "B·∫°n c√≥ kinh nghi·ªám l√†m vi·ªác ho·∫∑c ho·∫°t ƒë·ªông ngo·∫°i kh√≥a n√†o kh√¥ng?"

**T√†i ch√≠nh:**
- "V·ªÅ t√†i ch√≠nh, ng√¢n s√°ch d·ª± ki·∫øn c·ªßa b·∫°n kho·∫£ng bao nhi√™u? (VD: 50,000 USD/nƒÉm)"
- "Ngu·ªìn t√†i ch√≠nh ch√≠nh ƒë·∫øn t·ª´ ƒë√¢u? C√≥ c·∫ßn h·ªó tr·ª£ h·ªçc b·ªïng kh√¥ng?"

**Ng√¥n ng·ªØ:**
- "B·∫°n c√≥ ch·ª©ng ch·ªâ ng√¥n ng·ªØ n√†o ch∆∞a? (IELTS, TOEFL, Duolingo...)"
- "N·∫øu ch∆∞a c√≥, b·∫°n d·ª± ƒë·ªãnh thi ch·ª©ng ch·ªâ n√†o?"

**K·∫ø ho·∫°ch:**
- "B·∫°n d·ª± ƒë·ªãnh nh·∫≠p h·ªçc khi n√†o? (VD: Fall 2025, Th√°ng 9/2025)"
- "Hi·ªán t·∫°i b·∫°n ƒë√£ chu·∫©n b·ªã ƒë∆∞·ª£c nh·ªØng g√¨ r·ªìi?"

**C√ÅCH H·ªéI TH√îNG MINH:**
1. **H·ªèi m·ªü ƒë·∫ßu**: "ƒê·ªÉ t∆∞ v·∫•n ch√≠nh x√°c, m√¨nh c·∫ßn t√¨m hi·ªÉu th√™m v·ªÅ b·∫°n. B·∫°n c√≥ th·ªÉ b·∫Øt ƒë·∫ßu v·ªõi..."
2. **Theo nh√≥m**: Kh√¥ng h·ªèi t·∫•t c·∫£ c√πng l√∫c, h·ªèi 2-3 th√¥ng tin li√™n quan trong 1 l·∫ßn
3. **G·ª£i √Ω v√≠ d·ª•**: Lu√¥n ƒë∆∞a v√≠ d·ª• c·ª• th·ªÉ ƒë·ªÉ user d·ªÖ hi·ªÉu
4. **Ch·∫•p nh·∫≠n thi·∫øu**: "N·∫øu ch∆∞a c√≥ th√¥ng tin n√†y, c·ª© b·ªè tr·ªëng, ch√∫ng ta s·∫Ω b·ªï sung sau"
5. **X√°c nh·∫≠n**: Sau khi c√≥ ƒë·ªß th√¥ng tin, ƒë·ªçc l·∫°i ƒë·ªÉ user ki·ªÉm tra

**M·∫§U CH·ªêT ƒê·ªÇ CHUY·ªÇN PHASE:**
- Khi ƒë√£ c√≥ ƒë·ªß ng√†nh h·ªçc + qu·ªëc gia ∆∞a th√≠ch ‚Üí g·ª£i √Ω chuy·ªÉn sang SELECT_SCHOOL
- Khi user h·ªèi v·ªÅ gi·∫•y t·ªù ‚Üí chuy·ªÉn sang LEGAL_CHECKLIST  
- Khi user b√°o c√°o ti·∫øn ƒë·ªô ‚Üí chuy·ªÉn sang PROGRESS_TRACKING
- Khi h·ªèi v·ªÅ sinh ho·∫°t ‚Üí chuy·ªÉn sang LIFE_PLANNING
`;
  }

  /**
   * Generate smart questions based on missing information
   */
  generateSmartQuestions(session: AgentSessionDocument): string {
    if (session.phase !== 'collect_info') return '';

    const userInfo = session.userInfo || {};
    const questions: string[] = [];

    // Personal info questions
    if (!userInfo.fullName && !userInfo.email && !userInfo.phoneNumber) {
      questions.push(
        'üßç **Th√¥ng tin li√™n h·ªá**: B·∫°n c√≥ th·ªÉ chia s·∫ª h·ªç t√™n ƒë·∫ßy ƒë·ªß, email v√† s·ªë ƒëi·ªán tho·∫°i ƒë·ªÉ m√¨nh c√≥ th·ªÉ h·ªó tr·ª£ t·ªët h∆°n kh√¥ng?',
      );
    }

    // Education questions
    if (!userInfo.currentEducationLevel || !userInfo.academicResult) {
      questions.push(
        'üìö **H·ªçc v·∫•n hi·ªán t·∫°i**: B·∫°n ƒëang ·ªü tr√¨nh ƒë·ªô h·ªçc v·∫•n n√†o (THPT/Cao ƒë·∫≥ng/ƒê·∫°i h·ªçc) v√† k·∫øt qu·∫£ h·ªçc t·∫≠p nh∆∞ th·∫ø n√†o? (VD: GPA 3.5/4.0)',
      );
    }

    // Major and country questions
    if (!userInfo.dreamMajor || !userInfo.preferredStudyCountry) {
      questions.push(
        'üéì **Nguy·ªán v·ªçng h·ªçc t·∫≠p**: B·∫°n mu·ªën h·ªçc ng√†nh g√¨ v√† t·∫°i qu·ªëc gia n√†o? L√Ω do ch·ªçn ng√†nh n√†y l√† g√¨?',
      );
    }

    // Financial questions
    if (!userInfo.estimatedBudget || userInfo.needsScholarship === null) {
      questions.push(
        'üí∞ **T√†i ch√≠nh**: Ng√¢n s√°ch d·ª± ki·∫øn c·ªßa b·∫°n kho·∫£ng bao nhi√™u? (VD: 50,000 USD/nƒÉm) C√≥ c·∫ßn h·ªó tr·ª£ h·ªçc b·ªïng kh√¥ng?',
      );
    }

    // Language certificates
    if (
      !userInfo.certificates ||
      Object.values(userInfo.certificates).every((v) => v === null)
    ) {
      questions.push(
        'üó£Ô∏è **Ch·ª©ng ch·ªâ ng√¥n ng·ªØ**: B·∫°n c√≥ ch·ª©ng ch·ªâ IELTS, TOEFL, Duolingo ho·∫∑c ch·ª©ng ch·ªâ ng√¥n ng·ªØ n√†o kh√°c kh√¥ng?',
      );
    }

    // Timeline questions
    if (!userInfo.intendedIntakeTime) {
      questions.push(
        'üìÖ **Th·ªùi gian**: B·∫°n d·ª± ƒë·ªãnh nh·∫≠p h·ªçc khi n√†o? (VD: Fall 2025, Th√°ng 9/2025)',
      );
    }

    if (questions.length === 0) {
      return '\n‚úÖ **Th√¥ng tin c∆° b·∫£n ƒë√£ ƒë·ªß!** B·∫°n c√≥ mu·ªën b·ªï sung th√™m g√¨ kh√¥ng, ho·∫∑c ch√∫ng ta c√≥ th·ªÉ chuy·ªÉn sang b∆∞·ªõc t√¨m tr∆∞·ªùng ph√π h·ª£p?';
    }

    return `
üìù **ƒê·ªÉ t∆∞ v·∫•n ch√≠nh x√°c nh·∫•t, m√¨nh c·∫ßn t√¨m hi·ªÉu th√™m m·ªôt s·ªë th√¥ng tin:**

${questions.slice(0, 2).join('\n\n')}

${questions.length > 2 ? '*(Ch√∫ng ta s·∫Ω t√¨m hi·ªÉu th√™m c√°c th√¥ng tin kh√°c sau)*' : ''}

üí° **L∆∞u √Ω**: N·∫øu b·∫°n ch∆∞a c√≥ th√¥ng tin n√†o, c·ª© b·ªè tr·ªëng, ch√∫ng ta s·∫Ω b·ªï sung d·∫ßn!`;
  }

  getMissingInfoFields(userInfo: any): string[] {
    const allFields = [
      'fullName',
      'email',
      'phoneNumber',
      'address',
      'dateOfBirth',
      'gender',
      'religion',
      'passportNumber',
      'passportExpiryDate',
      'currentCountry',
      'currentEducationLevel',
      'academicResult',
      'desiredEducationLevel',
      'dreamMajor',
      'reasonForChoosingMajor',
      'careerGoal',
      'preferredStudyCountry',
      'schoolSelectionCriteria',
      'extracurricularsAndExperience',
      'estimatedBudget',
      'fundingSource',
      'needsScholarship',
      'studyLanguage',
      'certificates',
      'studyPlan',
      'intendedIntakeTime',
      'currentProgress',
    ];

    return allFields.filter(
      (field) => !userInfo[field] || userInfo[field] === null,
    );
  }

  /**
   * Escape JSON for LangChain template to avoid "Single '}' in template" error
   */
  private escapeJsonForTemplate(obj: any): string {
    return JSON.stringify(obj, null, 2)
      .replace(/\{/g, '{{')
      .replace(/\}/g, '}}');
  }

  formatChatHistory(messages: any[]): string {
    return messages.map((msg) => `${msg.role}: ${msg.content}`).join('\n');
  }

  buildContextualPrompt(
    session: AgentSessionDocument,
    userMessage: string,
  ): string {
    const basePrompt = this.buildSystemPrompt(session);
    const history = this.formatChatHistory(session.messages.slice(-5)); // Last 5 messages for context

    return `${basePrompt}

L·ªãch s·ª≠ tr√≤ chuy·ªán g·∫ßn ƒë√¢y:
${history}

Tin nh·∫Øn hi·ªán t·∫°i: ${userMessage}`;
  }
}
