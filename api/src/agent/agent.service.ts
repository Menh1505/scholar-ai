import { Injectable, OnModuleInit } from '@nestjs/common';
import { LegalService } from '../legal/legal.service';
import { UserService } from '../user/user.service';
import { DatabaseService } from '../database/database.service';
import { Model } from 'mongoose';
import { ConversationSchema, ConversationDocument } from './schemas/conversation.schema';
import OpenAI from 'openai';

export interface ChatResponse {
    message: string;
    phase: string;
    data?: any;
    suggestions?: string[];
    progress?: any;
    conversationState?: any;
}

export interface StudentProfile {
    userId: string;
    name?: string;
    age?: number;
    gpa?: number;
    englishScore?: string;
    interestedMajors?: string[];
    preferredState?: string;
    preferredSchool?: string;
    budget?: number;
    immigrationGoal?: boolean;
}

export interface MajorRecommendation {
    name: string;
    description: string;
    careerProspects: string[];
    averageSalary: number;
    matchScore: number;
    reasons: string[];
}

export interface SchoolRecommendation {
    name: string;
    state: string;
    ranking: number;
    tuition: number;
    major: string;
    matchScore: number;
    reasons: string[];
}

@Injectable()
export class AgentService implements OnModuleInit {
    private conversationModel: Model<ConversationDocument>;
    private openai: OpenAI;

    constructor(
        private readonly legalService: LegalService,
        private readonly userService: UserService,
        private readonly databaseService: DatabaseService
    ) {
        this.openai = new OpenAI({
            apiKey: process.env.OPENAI_API_KEY,
        });
    }

    async onModuleInit() {
        const connection = this.databaseService.getConnection();
        this.conversationModel = connection.model<ConversationDocument>('Conversation', ConversationSchema);
    }

    async processConversation(userId: string, userMessage: string): Promise<ChatResponse> {
        // L·∫•y ho·∫∑c t·∫°o conversation state
        let conversation = await this.conversationModel.findOne({ userId }).sort({ updatedAt: -1 });

        if (!conversation) {
            conversation = new this.conversationModel({
                userId,
                phase: 'introduction',
                lastMessage: userMessage
            });
        } else {
            conversation.lastMessage = userMessage;
        }

        // X·ª≠ l√Ω theo phase hi·ªán t·∫°i
        let response: ChatResponse;

        switch (conversation.phase) {
            case 'introduction':
                response = await this.handleIntroduction(conversation, userMessage);
                break;

            case 'collect-info':
                response = await this.handleCollectInfo(conversation, userMessage);
                break;

            case 'recommend-majors':
                response = await this.handleRecommendMajors(conversation, userMessage);
                break;

            case 'recommend-schools':
                response = await this.handleRecommendSchools(conversation, userMessage);
                break;

            case 'legal':
                response = await this.handleLegal(conversation, userMessage);
                break;

            default:
                response = await this.handleIntroduction(conversation, userMessage);
        }

        // C·∫≠p nh·∫≠t conversation state
        if (response.phase) {
            conversation.phase = response.phase as any;
        }
        if (response.data) {
            // Merge data v√†o conversation
            if (response.data.selectedMajor) {
                conversation.selectedMajor = response.data.selectedMajor;
            }
            if (response.data.selectedSchool) {
                conversation.selectedSchool = response.data.selectedSchool;
            }
            if (response.data.legalChecklist) {
                conversation.legalChecklist = response.data.legalChecklist;
            }
            if (response.data.userProfile) {
                conversation.userProfile = { ...conversation.userProfile, ...response.data.userProfile };
            }
            if (response.data.recommendations) {
                conversation.recommendations = response.data.recommendations;
            }
        }

        await conversation.save();

        // Th√™m conversation state v√†o response
        response.conversationState = {
            userId: conversation.userId,
            phase: conversation.phase,
            selectedSchool: conversation.selectedSchool,
            selectedMajor: conversation.selectedMajor,
            legalChecklist: conversation.legalChecklist
        };

        return response;
    }

    private async handleIntroduction(conversation: ConversationDocument, userMessage: string): Promise<ChatResponse> {
        // T·∫°o response t·ª± nhi√™n v·ªõi OpenAI
        const aiMessage = await this.generateIntroductionResponse(userMessage);

        // Chuy·ªÉn sang giai ƒëo·∫°n collect-info n·∫øu user ƒë·ªìng √Ω
        if (this.isPositiveResponse(userMessage)) {
            return {
                message: aiMessage + "\n\nüìù H√£y cho t√¥i bi·∫øt m·ªôt ch√∫t v·ªÅ b·∫£n th√¢n b·∫°n nh√©! B·∫°n c√≥ th·ªÉ chia s·∫ª t√™n, email, GPA, ng√†nh h·ªçc quan t√¢m, v.v.",
                phase: 'collect-info',
                suggestions: ['T√¥i t√™n l√†...', 'GPA c·ªßa t√¥i l√†...', 'T√¥i quan t√¢m ƒë·∫øn ng√†nh...']
            };
        }

        return {
            message: aiMessage,
            phase: 'introduction',
            suggestions: ['C√≥', 'ƒê∆∞·ª£c', 'B·∫Øt ƒë·∫ßu th√¥i']
        };
    }

    private async handleCollectInfo(conversation: ConversationDocument, userMessage: string): Promise<ChatResponse> {
        // Extract th√¥ng tin t·ª´ message
        const extractedInfo = this.extractUserInfoFromMessage(userMessage);

        // Merge v·ªõi th√¥ng tin c√≥ s·∫µn
        const currentProfile = conversation.userProfile || {};
        const updatedProfile = { ...currentProfile, ...extractedInfo };

        // L·∫•y th√¥ng tin t·ª´ user database
        const user = await this.userService.findOne(conversation.userId.toString());
        if (user) {
            updatedProfile.name = updatedProfile.name || user.fullname;
            updatedProfile.email = updatedProfile.email || user.email;
        }

        // Ki·ªÉm tra th√¥ng tin c√≤n thi·∫øu
        const missingInfo = this.getMissingInfo(updatedProfile);

        if (missingInfo.length > 0) {
            // S·ª≠ d·ª•ng OpenAI ƒë·ªÉ t·∫°o response t·ª± nhi√™n
            const aiMessage = await this.generateInfoCollectionResponse(userMessage, missingInfo, extractedInfo);

            return {
                message: aiMessage,
                phase: 'collect-info',
                data: { userProfile: updatedProfile },
                suggestions: this.generateInfoSuggestions(missingInfo)
            };
        } else {
            // S·ª≠ d·ª•ng OpenAI ƒë·ªÉ t·∫°o response t·ª± nhi√™n
            const aiMessage = await this.generateGeneralResponse(
                userMessage,
                'collect-info-complete',
                { userProfile: updatedProfile }
            );

            return {
                message: aiMessage + "\n\nB√¢y gi·ªù t√¥i s·∫Ω ph√¢n t√≠ch v√† ƒë∆∞a ra g·ª£i √Ω ng√†nh h·ªçc ph√π h·ª£p. B·∫°n c√≥ mu·ªën ti·∫øp t·ª•c kh√¥ng?",
                phase: 'recommend-majors',
                data: { userProfile: updatedProfile },
                suggestions: ['C√≥, ti·∫øp t·ª•c', 'ƒê∆∞·ª£c', 'B·∫Øt ƒë·∫ßu ph√¢n t√≠ch']
            };
        }
    }

    private async handleRecommendMajors(conversation: ConversationDocument, userMessage: string): Promise<ChatResponse> {
        if (this.isPositiveResponse(userMessage)) {
            const recommendations = this.generateMajorRecommendations(conversation.userProfile);

            // S·ª≠ d·ª•ng OpenAI ƒë·ªÉ t·∫°o response t·ª± nhi√™n
            const aiMessage = await this.generateMajorRecommendationResponse(userMessage, recommendations, conversation.userProfile);

            const detailedInfo = `
üéØ D·ª±a tr√™n th√¥ng tin c·ªßa b·∫°n, t√¥i g·ª£i √Ω c√°c ng√†nh h·ªçc sau:

${recommendations.map((rec, index) => `
${index + 1}. **${rec.name}** (${rec.matchScore}% ph√π h·ª£p)
   üìù ${rec.description}
   üí∞ M·ª©c l∆∞∆°ng TB: $${rec.averageSalary.toLocaleString()}/nƒÉm
   üéØ C∆° h·ªôi: ${rec.careerProspects.join(', ')}
   ‚úÖ L√Ω do: ${rec.reasons.join(', ')}
`).join('\n')}

B·∫°n c√≥ mu·ªën ch·ªçn ng√†nh n√†o ƒë·ªÉ t√¥i g·ª£i √Ω tr∆∞·ªùng h·ªçc kh√¥ng? 
H√£y nh·∫≠p s·ªë th·ª© t·ª± (1, 2, 3) ho·∫∑c t√™n ng√†nh h·ªçc.
            `;

            return {
                message: aiMessage + "\n\n" + detailedInfo,
                phase: 'recommend-majors',
                data: { recommendations },
                suggestions: recommendations.map((rec, index) => `${index + 1}. ${rec.name}`)
            };
        }

        // X·ª≠ l√Ω ch·ªçn ng√†nh
        const selectedMajor = this.extractMajorSelection(userMessage, conversation.recommendations?.majors || []);

        if (selectedMajor) {
            return {
                message: `‚úÖ Tuy·ªát v·ªùi! B·∫°n ƒë√£ ch·ªçn ng√†nh **${selectedMajor}**. 

B√¢y gi·ªù t√¥i s·∫Ω t√¨m c√°c tr∆∞·ªùng ƒë·∫°i h·ªçc ph√π h·ª£p v·ªõi ng√†nh n√†y v√† profile c·ªßa b·∫°n.

B·∫°n c√≥ mu·ªën ti·∫øp t·ª•c kh√¥ng?`,
                phase: 'recommend-schools',
                data: { selectedMajor },
                suggestions: ['C√≥, ti·∫øp t·ª•c', 'ƒê∆∞·ª£c', 'T√¨m tr∆∞·ªùng ƒëi']
            };
        }

        return {
            message: "T√¥i kh√¥ng hi·ªÉu l·ª±a ch·ªçn c·ªßa b·∫°n. Vui l√≤ng nh·∫≠p s·ªë th·ª© t·ª± (1, 2, 3) ho·∫∑c t√™n ng√†nh h·ªçc ch√≠nh x√°c.",
            phase: 'recommend-majors',
            suggestions: conversation.recommendations?.majors?.map((rec, index) => `${index + 1}. ${rec.name}`) || []
        };
    }

    private async handleRecommendSchools(conversation: ConversationDocument, userMessage: string): Promise<ChatResponse> {
        if (this.isPositiveResponse(userMessage)) {
            const schoolRecommendations = this.generateSchoolRecommendations(
                conversation.userProfile,
                conversation.selectedMajor || ''
            );

            // S·ª≠ d·ª•ng OpenAI ƒë·ªÉ t·∫°o response t·ª± nhi√™n
            const aiMessage = await this.generateSchoolRecommendationResponse(
                userMessage,
                schoolRecommendations,
                conversation.selectedMajor || '',
                conversation.userProfile
            );

            const detailedInfo = `
üè´ D·ª±a tr√™n ng√†nh **${conversation.selectedMajor}** v√† profile c·ªßa b·∫°n, t√¥i g·ª£i √Ω c√°c tr∆∞·ªùng sau:

${schoolRecommendations.map((school, index) => `
${index + 1}. **${school.name}** - ${school.state}
   üèÜ Ranking: ${school.ranking}
   üí∞ H·ªçc ph√≠: $${school.tuition.toLocaleString()}/nƒÉm
   üìä Ph√π h·ª£p: ${school.matchScore}%
   ‚úÖ L√Ω do: ${school.reasons.join(', ')}
`).join('\n')}

B·∫°n c√≥ mu·ªën ch·ªçn tr∆∞·ªùng n√†o ƒë·ªÉ t√¥i t·∫°o danh s√°ch gi·∫•y t·ªù c·∫ßn chu·∫©n b·ªã kh√¥ng?
H√£y nh·∫≠p s·ªë th·ª© t·ª± (1, 2, 3) ho·∫∑c t√™n tr∆∞·ªùng.
            `;

            return {
                message: aiMessage + "\n\n" + detailedInfo,
                phase: 'recommend-schools',
                data: { schoolRecommendations },
                suggestions: schoolRecommendations.map((school, index) => `${index + 1}. ${school.name}`)
            };
        }

        // X·ª≠ l√Ω ch·ªçn tr∆∞·ªùng
        const selectedSchool = this.extractSchoolSelection(userMessage, conversation.recommendations?.schools || []);

        if (selectedSchool) {
            // T·∫°o legal checklist
            const legalChecklist = this.generateLegalChecklist(selectedSchool);

            // T·∫°o legal document trong database
            await this.legalService.initializeLegalDocumentsForUser(conversation.userId.toString(), selectedSchool);

            const message = `‚úÖ Tuy·ªát v·ªùi! B·∫°n ƒë√£ ch·ªçn **${selectedSchool}**.

üìã Danh s√°ch gi·∫•y t·ªù c·∫ßn chu·∫©n b·ªã:

${legalChecklist.map((doc, index) => `
${index + 1}. ${doc} - ‚è≥ Ch∆∞a ho√†n th√†nh
`).join('')}

**Ti·∫øn ƒë·ªô hi·ªán t·∫°i: 0/${legalChecklist.length} (0%)**

Khi b·∫°n ho√†n th√†nh gi·∫•y t·ªù n√†o, h√£y nh·∫Øn cho t√¥i. V√≠ d·ª•: "T√¥i ƒë√£ l√†m xong Passport" ho·∫∑c "Passport ƒë√£ xong".

B·∫°n c√≥ c√¢u h·ªèi g√¨ kh√¥ng?`;

            return {
                message,
                phase: 'legal',
                data: {
                    selectedSchool,
                    legalChecklist
                },
                suggestions: ['Ki·ªÉm tra ti·∫øn ƒë·ªô', 'H∆∞·ªõng d·∫´n l√†m Passport', 'L√†m gi·∫•y t·ªù n√†o tr∆∞·ªõc?']
            };
        }

        return {
            message: "T√¥i kh√¥ng hi·ªÉu l·ª±a ch·ªçn c·ªßa b·∫°n. Vui l√≤ng nh·∫≠p s·ªë th·ª© t·ª± (1, 2, 3) ho·∫∑c t√™n tr∆∞·ªùng ch√≠nh x√°c.",
            phase: 'recommend-schools',
            suggestions: conversation.recommendations?.schools?.map((school, index) => `${index + 1}. ${school.name}`) || []
        };
    }

    private async handleLegal(conversation: ConversationDocument, userMessage: string): Promise<ChatResponse> {
        // Ph√¢n t√≠ch message ƒë·ªÉ xem c√≥ c·∫≠p nh·∫≠t gi·∫•y t·ªù kh√¥ng
        const documentUpdate = this.extractDocumentUpdate(userMessage);

        if (documentUpdate) {
            try {
                await this.legalService.updateDocumentStatusByName(
                    conversation.userId.toString(),
                    documentUpdate.documentName,
                    'done'
                );

                const progress = await this.legalService.getDocumentProgress(conversation.userId.toString());

                // S·ª≠ d·ª•ng OpenAI ƒë·ªÉ t·∫°o response t·ª± nhi√™n
                const aiMessage = await this.generateLegalDocumentResponse(userMessage, documentUpdate, progress);

                let detailedMessage = `‚úÖ Tuy·ªát v·ªùi! T√¥i ƒë√£ c·∫≠p nh·∫≠t **${documentUpdate.documentName}** th√†nh ho√†n th√†nh.

**Ti·∫øn ƒë·ªô hi·ªán t·∫°i: ${progress.completed}/${progress.total} (${progress.progress}%)**`;

                if (progress.pending > 0) {
                    const pendingDocs = await this.legalService.getPendingDocuments(conversation.userId.toString());
                    detailedMessage += `\n\nüìã Gi·∫•y t·ªù c√≤n l·∫°i c·∫ßn chu·∫©n b·ªã:
${pendingDocs.map((doc, index) => `${index + 1}. ${doc.name}`).join('\n')}

H√£y ti·∫øp t·ª•c chu·∫©n b·ªã v√† b√°o cho t√¥i khi ho√†n th√†nh nh√©!`;
                } else {
                    detailedMessage += `\n\nüéâ **CH√öC M·ª™NG!** B·∫°n ƒë√£ ho√†n th√†nh t·∫•t c·∫£ gi·∫•y t·ªù c·∫ßn thi·∫øt!

B√¢y gi·ªù b·∫°n c√≥ th·ªÉ ti·∫øn h√†nh n·ªôp h·ªì s∆° du h·ªçc. Ch√∫c b·∫°n th√†nh c√¥ng!`;
                }

                return {
                    message: aiMessage + "\n\n" + detailedMessage,
                    phase: progress.pending > 0 ? 'legal' : 'completed',
                    progress,
                    suggestions: progress.pending > 0 ? ['Ki·ªÉm tra ti·∫øn ƒë·ªô', 'H∆∞·ªõng d·∫´n gi·∫•y t·ªù ti·∫øp theo'] : ['C·∫£m ∆°n b·∫°n!']
                };
            } catch (error) {
                const errorMessage = await this.generateGeneralResponse(
                    userMessage,
                    'legal-error',
                    { error: error.message, documentName: documentUpdate.documentName }
                );

                return {
                    message: errorMessage,
                    phase: 'legal',
                    suggestions: ['Ki·ªÉm tra ti·∫øn ƒë·ªô', 'Danh s√°ch gi·∫•y t·ªù']
                };
            }
        }

        // X·ª≠ l√Ω c√°c c√¢u h·ªèi kh√°c
        if (userMessage.toLowerCase().includes('ti·∫øn ƒë·ªô') ||
            userMessage.toLowerCase().includes('progress')) {

            const progress = await this.legalService.getDocumentProgress(conversation.userId.toString());
            const pendingDocs = await this.legalService.getPendingDocuments(conversation.userId.toString());

            const message = `üìä **Ti·∫øn ƒë·ªô hi·ªán t·∫°i: ${progress.completed}/${progress.total} (${progress.progress}%)**

üìã Gi·∫•y t·ªù c√≤n l·∫°i c·∫ßn chu·∫©n b·ªã:
${pendingDocs.map((doc, index) => `${index + 1}. ${doc.name}`).join('\n')}

Khi ho√†n th√†nh gi·∫•y t·ªù n√†o, h√£y nh·∫Øn cho t√¥i nh√©!`;

            return {
                message,
                phase: 'legal',
                progress,
                suggestions: ['H∆∞·ªõng d·∫´n l√†m gi·∫•y t·ªù', '∆Øu ti√™n gi·∫•y t·ªù n√†o?']
            };
        }

        return {
            message: `T√¥i hi·ªÉu b·∫°n ƒëang trong giai ƒëo·∫°n chu·∫©n b·ªã gi·∫•y t·ªù. 

ƒê·ªÉ c·∫≠p nh·∫≠t ti·∫øn ƒë·ªô, b·∫°n c√≥ th·ªÉ:
‚Ä¢ N√≥i "T√¥i ƒë√£ l√†m xong [t√™n gi·∫•y t·ªù]"
‚Ä¢ H·ªèi "ti·∫øn ƒë·ªô hi·ªán t·∫°i nh∆∞ th·∫ø n√†o?"
‚Ä¢ Ho·∫∑c h·ªèi b·∫•t k·ª≥ c√¢u h·ªèi n√†o kh√°c

T√¥i s·∫µn s√†ng h·ªó tr·ª£ b·∫°n!`,
            phase: 'legal',
            suggestions: ['Ki·ªÉm tra ti·∫øn ƒë·ªô', 'H∆∞·ªõng d·∫´n l√†m gi·∫•y t·ªù', 'Danh s√°ch gi·∫•y t·ªù']
        };
    }

    // Helper methods
    private isPositiveResponse(message: string): boolean {
        const lowerMessage = message.toLowerCase();
        const positiveWords = ['c√≥', 'ƒë∆∞·ª£c', 'ok', 's·∫µn s√†ng', 'b·∫Øt ƒë·∫ßu', 'ti·∫øp t·ª•c', 'yes', 'okay', 'sure'];
        return positiveWords.some(word => lowerMessage.includes(word));
    }

    private extractUserInfoFromMessage(message: string): any {
        const info: any = {};

        // Extract name
        const nameMatch = message.match(/t√™n\s+(l√†\s+)?([a-zA-Z√Ä-√ø\s]+)/i) ||
            message.match(/t√¥i\s+(l√†\s+)?([a-zA-Z√Ä-√ø\s]+)/i);
        if (nameMatch) info.name = nameMatch[2].trim();

        // Extract email
        const emailMatch = message.match(/[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}/);
        if (emailMatch) info.email = emailMatch[0];

        // Extract phone
        const phoneMatch = message.match(/(\+?\d{1,3}[-.\s]?)?(\d{3}[-.\s]?\d{3}[-.\s]?\d{4}|\d{10})/);
        if (phoneMatch) info.phone = phoneMatch[0];

        // Extract GPA
        const gpaMatch = message.match(/GPA[:\s]*(\d+\.?\d*)/i) ||
            message.match(/ƒëi·ªÉm[:\s]*(\d+\.?\d*)/i);
        if (gpaMatch) info.gpa = parseFloat(gpaMatch[1]);

        // Extract budget
        const budgetMatch = message.match(/(\d+)[,.]?(\d+)?\s*(USD|dollar|usd|\$)/i);
        if (budgetMatch) info.budget = parseInt(budgetMatch[1] + (budgetMatch[2] || ''));

        // Extract interested majors
        const majorKeywords = ['computer science', 'business', 'engineering', 'economics', 'medicine', 'law'];
        const interestedMajors = majorKeywords.filter(major =>
            message.toLowerCase().includes(major)
        );
        if (interestedMajors.length > 0) info.interestedMajors = interestedMajors;

        return info;
    }

    private getMissingInfo(profile: any): string[] {
        const requiredFields = ['name', 'email', 'gpa', 'interestedMajors'];
        return requiredFields.filter(field => !profile[field]);
    }

    private translateMissingInfo(info: string): string {
        const translations: { [key: string]: string } = {
            'name': 'H·ªç v√† t√™n',
            'email': 'Email',
            'phone': 'S·ªë ƒëi·ªán tho·∫°i',
            'gpa': 'ƒêi·ªÉm GPA',
            'interestedMajors': 'Ng√†nh h·ªçc quan t√¢m',
            'budget': 'Ng√¢n s√°ch d·ª± ki·∫øn',
            'preferredState': 'Bang mong mu·ªën'
        };

        return translations[info] || info;
    }

    private generateInfoSuggestions(missingInfo: string[]): string[] {
        const suggestions: string[] = [];

        if (missingInfo.includes('name')) suggestions.push('T√¥i t√™n l√†...');
        if (missingInfo.includes('gpa')) suggestions.push('GPA c·ªßa t√¥i l√†...');
        if (missingInfo.includes('interestedMajors')) suggestions.push('T√¥i quan t√¢m ƒë·∫øn ng√†nh...');
        if (missingInfo.includes('budget')) suggestions.push('Ng√¢n s√°ch c·ªßa t√¥i l√†...');

        return suggestions;
    }

    private generateMajorRecommendations(profile: any): any[] {
        const majors = [
            {
                name: 'Computer Science',
                description: 'Khoa h·ªçc m√°y t√≠nh v·ªõi focus v√†o ph√°t tri·ªÉn ph·∫ßn m·ªÅm, AI, v√† c√¥ng ngh·ªá',
                careerProspects: ['Software Engineer', 'Data Scientist', 'Product Manager', 'AI Engineer'],
                averageSalary: 95000,
                matchScore: this.calculateMajorMatch(profile, 'Computer Science'),
                reasons: this.getMajorReasons(profile, 'Computer Science')
            },
            {
                name: 'Business Administration',
                description: 'Qu·∫£n tr·ªã kinh doanh v·ªõi k·ªπ nƒÉng l√£nh ƒë·∫°o v√† qu·∫£n l√Ω',
                careerProspects: ['Manager', 'Consultant', 'Entrepreneur', 'Business Analyst'],
                averageSalary: 75000,
                matchScore: this.calculateMajorMatch(profile, 'Business Administration'),
                reasons: this.getMajorReasons(profile, 'Business Administration')
            },
            {
                name: 'Engineering',
                description: 'K·ªπ thu·∫≠t v·ªõi nhi·ªÅu chuy√™n ng√†nh kh√°c nhau',
                careerProspects: ['Engineer', 'Project Manager', 'Technical Lead', 'Research Scientist'],
                averageSalary: 85000,
                matchScore: this.calculateMajorMatch(profile, 'Engineering'),
                reasons: this.getMajorReasons(profile, 'Engineering')
            }
        ];

        return majors.sort((a, b) => b.matchScore - a.matchScore);
    }

    private calculateMajorMatch(profile: any, major: string): number {
        let score = 50; // Base score

        // GPA boost
        if (profile.gpa && profile.gpa >= 3.5) score += 20;
        else if (profile.gpa && profile.gpa >= 3.0) score += 10;

        // Interest match
        if (profile.interestedMajors?.some((interest: string) =>
            interest.toLowerCase().includes(major.toLowerCase())
        )) {
            score += 30;
        }

        return Math.min(score, 100);
    }

    private getMajorReasons(profile: any, major: string): string[] {
        const reasons: string[] = [];

        if (profile.gpa && profile.gpa >= 3.5) {
            reasons.push('GPA cao ph√π h·ª£p v·ªõi ng√†nh c√≥ t√≠nh c·∫°nh tranh');
        }

        if (profile.interestedMajors?.some((interest: string) =>
            interest.toLowerCase().includes(major.toLowerCase())
        )) {
            reasons.push('Ph√π h·ª£p v·ªõi s·ªü th√≠ch ƒë√£ ƒë·ªÅ c·∫≠p');
        }

        if (major === 'Computer Science') {
            reasons.push('Ng√†nh hot v·ªõi nhi·ªÅu c∆° h·ªôi vi·ªác l√†m');
        }

        return reasons;
    }

    private generateSchoolRecommendations(profile: any, selectedMajor: string): any[] {
        const schools = [
            {
                name: 'Stanford University',
                state: 'California',
                ranking: 5,
                tuition: 55000,
                matchScore: this.calculateSchoolMatch(profile, 'Stanford University'),
                reasons: this.getSchoolReasons(profile, 'Stanford University')
            },
            {
                name: 'University of Texas at Austin',
                state: 'Texas',
                ranking: 42,
                tuition: 38000,
                matchScore: this.calculateSchoolMatch(profile, 'University of Texas at Austin'),
                reasons: this.getSchoolReasons(profile, 'University of Texas at Austin')
            },
            {
                name: 'Arizona State University',
                state: 'Arizona',
                ranking: 103,
                tuition: 28000,
                matchScore: this.calculateSchoolMatch(profile, 'Arizona State University'),
                reasons: this.getSchoolReasons(profile, 'Arizona State University')
            }
        ];

        return schools.sort((a, b) => b.matchScore - a.matchScore);
    }

    private calculateSchoolMatch(profile: any, schoolName: string): number {
        let score = 60; // Base score

        // GPA matching
        if (profile.gpa && profile.gpa >= 3.7) score += 20;
        else if (profile.gpa && profile.gpa >= 3.3) score += 15;
        else if (profile.gpa && profile.gpa >= 3.0) score += 10;

        // Budget consideration
        if (profile.budget) {
            if (schoolName.includes('Arizona') && profile.budget >= 30000) score += 15;
            if (schoolName.includes('Texas') && profile.budget >= 40000) score += 15;
            if (schoolName.includes('Stanford') && profile.budget >= 60000) score += 15;
        }

        return Math.min(score, 100);
    }

    private getSchoolReasons(profile: any, schoolName: string): string[] {
        const reasons: string[] = [];

        if (schoolName.includes('Stanford')) {
            reasons.push('Tr∆∞·ªùng danh ti·∫øng v·ªõi ch∆∞∆°ng tr√¨nh m·∫°nh');
        } else if (schoolName.includes('Texas')) {
            reasons.push('Ch·∫•t l∆∞·ª£ng t·ªët v·ªõi chi ph√≠ h·ª£p l√Ω');
        } else if (schoolName.includes('Arizona')) {
            reasons.push('D·ªÖ ƒë·∫≠u v·ªõi h·ªçc ph√≠ th·∫•p');
        }

        return reasons;
    }

    private generateLegalChecklist(school: string): string[] {
        const commonDocs = [
            'Passport',
            'I-20',
            'DS-160',
            'SEVIS Receipt',
            'Visa Application',
            'Financial Documents',
            'Academic Transcripts',
            'English Proficiency'
        ];

        // C√≥ th·ªÉ customize theo tr∆∞·ªùng
        if (school.includes('Stanford')) {
            commonDocs.push('Additional Essays');
        }

        return commonDocs;
    }

    private extractMajorSelection(message: string, recommendations: any[]): string | null {
        if (!recommendations) return null;

        // Check for number selection
        const numberMatch = message.match(/\d+/);
        if (numberMatch) {
            const index = parseInt(numberMatch[0]) - 1;
            if (index >= 0 && index < recommendations.length) {
                return recommendations[index].name;
            }
        }

        // Check for major name
        const lowerMessage = message.toLowerCase();
        for (const rec of recommendations) {
            if (lowerMessage.includes(rec.name.toLowerCase())) {
                return rec.name;
            }
        }

        return null;
    }

    private extractSchoolSelection(message: string, recommendations: any[]): string | null {
        if (!recommendations) return null;

        // Check for number selection
        const numberMatch = message.match(/\d+/);
        if (numberMatch) {
            const index = parseInt(numberMatch[0]) - 1;
            if (index >= 0 && index < recommendations.length) {
                return recommendations[index].name;
            }
        }

        // Check for school name
        const lowerMessage = message.toLowerCase();
        for (const rec of recommendations) {
            if (lowerMessage.includes(rec.name.toLowerCase())) {
                return rec.name;
            }
        }

        return null;
    }

    private extractDocumentUpdate(message: string): { documentName: string } | null {
        const lowerMessage = message.toLowerCase();

        // Common document names
        const documents = [
            'passport', 'h·ªô chi·∫øu',
            'i-20', 'i20',
            'ds-160', 'ds160',
            'sevis receipt', 'sevis fee',
            'visa application', 'visa',
            'financial documents', 't√†i ch√≠nh',
            'academic transcripts', 'b·∫£ng ƒëi·ªÉm',
            'english proficiency', 'ti·∫øng anh'
        ];

        const completionPhrases = [
            'ƒë√£ l√†m xong', 'ƒë√£ ho√†n th√†nh', 'ƒë√£ xong', 'ho√†n th√†nh',
            'done', 'finished', 'completed', 'ready'
        ];

        // Check if message contains completion phrase
        const hasCompletionPhrase = completionPhrases.some(phrase =>
            lowerMessage.includes(phrase)
        );

        if (hasCompletionPhrase) {
            // Find which document is mentioned
            for (const doc of documents) {
                if (lowerMessage.includes(doc)) {
                    return { documentName: this.normalizeDocumentName(doc) };
                }
            }
        }

        return null;
    }

    private normalizeDocumentName(name: string): string {
        const mapping: { [key: string]: string } = {
            'passport': 'Passport',
            'h·ªô chi·∫øu': 'Passport',
            'i-20': 'I-20',
            'i20': 'I-20',
            'ds-160': 'DS-160',
            'ds160': 'DS-160',
            'sevis receipt': 'SEVIS Receipt',
            'sevis fee': 'SEVIS Receipt',
            'visa application': 'Visa Application',
            'visa': 'Visa Application',
            'financial documents': 'Financial Documents',
            't√†i ch√≠nh': 'Financial Documents',
            'academic transcripts': 'Academic Transcripts',
            'b·∫£ng ƒëi·ªÉm': 'Academic Transcripts',
            'english proficiency': 'English Proficiency',
            'ti·∫øng anh': 'English Proficiency'
        };

        return mapping[name.toLowerCase()] || name;
    }

    async getConversationState(userId: string): Promise<any> {
        const conversation = await this.conversationModel.findOne({ userId }).sort({ updatedAt: -1 });

        if (!conversation) {
            return {
                phase: 'introduction',
                message: 'Ch∆∞a c√≥ cu·ªôc h·ªôi tho·∫°i. H√£y b·∫Øt ƒë·∫ßu b·∫±ng c√°ch n√≥i "Xin ch√†o"!',
                isNew: true
            };
        }

        return {
            userId: conversation.userId,
            phase: conversation.phase,
            selectedSchool: conversation.selectedSchool,
            selectedMajor: conversation.selectedMajor,
            legalChecklist: conversation.legalChecklist,
            lastMessage: conversation.lastMessage,
            updatedAt: conversation.updatedAt
        };
    }

    async resetConversation(userId: string): Promise<any> {
        await this.conversationModel.deleteMany({ userId });

        return {
            message: "Cu·ªôc h·ªôi tho·∫°i ƒë√£ ƒë∆∞·ª£c reset. Ch√∫ng ta c√≥ th·ªÉ b·∫Øt ƒë·∫ßu l·∫°i t·ª´ ƒë·∫ßu!",
            phase: 'introduction'
        };
    }

    // OpenAI Helper Methods
    private async generateAIResponse(systemPrompt: string, userMessage: string, context?: any): Promise<string> {
        try {
            const messages: any[] = [
                {
                    role: 'system',
                    content: systemPrompt
                }
            ];

            if (context) {
                messages.push({
                    role: 'system',
                    content: `Context: ${JSON.stringify(context)}`
                });
            }

            messages.push({
                role: 'user',
                content: userMessage
            });

            const completion = await this.openai.chat.completions.create({
                model: 'gpt-3.5-turbo',
                messages: messages,
                max_tokens: 500,
                temperature: 0.7,
            });

            return completion.choices[0]?.message?.content || '';
        } catch (error) {
            console.error('OpenAI API Error:', error);
            return 'Xin l·ªói, t√¥i g·∫∑p s·ª± c·ªë k·ªπ thu·∫≠t. Vui l√≤ng th·ª≠ l·∫°i sau.';
        }
    }

    private async generateIntroductionResponse(userMessage: string): Promise<string> {
        const systemPrompt = `
B·∫°n l√† AI Agent chuy√™n t∆∞ v·∫•n du h·ªçc M·ªπ t√™n l√† Scholar AI. Nhi·ªám v·ª• c·ªßa b·∫°n l√†:
1. Ch√†o h·ªèi th√¢n thi·ªán b·∫±ng ti·∫øng Vi·ªát
2. Gi·ªõi thi·ªáu v·ªÅ d·ªãch v·ª• t∆∞ v·∫•n du h·ªçc
3. Khuy·∫øn kh√≠ch ng∆∞·ªùi d√πng b·∫Øt ƒë·∫ßu qu√° tr√¨nh t∆∞ v·∫•n

Phong c√°ch: Th√¢n thi·ªán, chuy√™n nghi·ªáp, nhi·ªát t√¨nh
Ng√¥n ng·ªØ: Ti·∫øng Vi·ªát
ƒê·ªô d√†i: 3-5 c√¢u
K·∫øt th√∫c: H·ªèi xem ng∆∞·ªùi d√πng c√≥ mu·ªën b·∫Øt ƒë·∫ßu kh√¥ng

C√°c d·ªãch v·ª• ch√≠nh:
- T∆∞ v·∫•n ng√†nh h·ªçc ph√π h·ª£p
- G·ª£i √Ω tr∆∞·ªùng ƒë·∫°i h·ªçc
- H∆∞·ªõng d·∫´n gi·∫•y t·ªù ph√°p l√Ω
- Theo d√µi ti·∫øn ƒë·ªô chu·∫©n b·ªã
`;

        return await this.generateAIResponse(systemPrompt, userMessage);
    }

    private async generateInfoCollectionResponse(userMessage: string, missingInfo: string[], extractedInfo: any): Promise<string> {
        const systemPrompt = `
B·∫°n l√† AI Agent thu th·∫≠p th√¥ng tin du h·ªçc. Nhi·ªám v·ª•:
1. C·∫£m ∆°n th√¥ng tin ƒë√£ cung c·∫•p
2. Y√™u c·∫ßu th√¥ng tin c√≤n thi·∫øu m·ªôt c√°ch t·ª± nhi√™n
3. Khuy·∫øn kh√≠ch ng∆∞·ªùi d√πng cung c·∫•p th√™m

Phong c√°ch: Th√¢n thi·ªán, khuy·∫øn kh√≠ch
Ng√¥n ng·ªØ: Ti·∫øng Vi·ªát
ƒê·ªô d√†i: 2-4 c√¢u

Th√¥ng tin ƒë√£ c√≥: ${JSON.stringify(extractedInfo)}
Th√¥ng tin c√≤n thi·∫øu: ${missingInfo.join(', ')}

H√£y t·∫°o c√¢u h·ªèi t·ª± nhi√™n ƒë·ªÉ thu th·∫≠p th√¥ng tin c√≤n thi·∫øu.
`;

        return await this.generateAIResponse(systemPrompt, userMessage);
    }

    private async generateMajorRecommendationResponse(userMessage: string, recommendations: any[], userProfile: any): Promise<string> {
        const systemPrompt = `
B·∫°n l√† AI Agent t∆∞ v·∫•n ng√†nh h·ªçc. Nhi·ªám v·ª•:
1. Ph√¢n t√≠ch profile c·ªßa h·ªçc sinh
2. Gi·ªõi thi·ªáu c√°c ng√†nh h·ªçc ph√π h·ª£p
3. Gi·∫£i th√≠ch l√Ω do khuy·∫øn ngh·ªã
4. Khuy·∫øn kh√≠ch ch·ªçn ng√†nh

Phong c√°ch: Chuy√™n nghi·ªáp, ph√¢n t√≠ch, khuy·∫øn kh√≠ch
Ng√¥n ng·ªØ: Ti·∫øng Vi·ªát
ƒê·ªô d√†i: 4-6 c√¢u

Profile h·ªçc sinh: ${JSON.stringify(userProfile)}
Ng√†nh h·ªçc ƒë·ªÅ xu·∫•t: ${JSON.stringify(recommendations)}

H√£y t·∫°o l·ªùi gi·ªõi thi·ªáu h·∫•p d·∫´n v·ªÅ c√°c ng√†nh h·ªçc ph√π h·ª£p.
`;

        return await this.generateAIResponse(systemPrompt, userMessage);
    }

    private async generateSchoolRecommendationResponse(userMessage: string, recommendations: any[], selectedMajor: string, userProfile: any): Promise<string> {
        const systemPrompt = `
B·∫°n l√† AI Agent t∆∞ v·∫•n tr∆∞·ªùng h·ªçc. Nhi·ªám v·ª•:
1. Gi·ªõi thi·ªáu c√°c tr∆∞·ªùng ƒë·∫°i h·ªçc ph√π h·ª£p
2. Ph√¢n t√≠ch ∆∞u nh∆∞·ª£c ƒëi·ªÉm t·ª´ng tr∆∞·ªùng
3. ƒê∆∞a ra khuy·∫øn ngh·ªã d·ª±a tr√™n profile
4. Khuy·∫øn kh√≠ch ch·ªçn tr∆∞·ªùng

Phong c√°ch: Chuy√™n nghi·ªáp, ph√¢n t√≠ch chi ti·∫øt
Ng√¥n ng·ªØ: Ti·∫øng Vi·ªát
ƒê·ªô d√†i: 5-7 c√¢u

Ng√†nh h·ªçc ƒë√£ ch·ªçn: ${selectedMajor}
Profile h·ªçc sinh: ${JSON.stringify(userProfile)}
Tr∆∞·ªùng ƒë·∫°i h·ªçc ƒë·ªÅ xu·∫•t: ${JSON.stringify(recommendations)}

H√£y t·∫°o l·ªùi gi·ªõi thi·ªáu chi ti·∫øt v·ªÅ c√°c tr∆∞·ªùng ph√π h·ª£p.
`;

        return await this.generateAIResponse(systemPrompt, userMessage);
    }

    private async generateLegalDocumentResponse(userMessage: string, documentUpdate: any, progress: any): Promise<string> {
        const systemPrompt = `
B·∫°n l√† AI Agent h∆∞·ªõng d·∫´n gi·∫•y t·ªù ph√°p l√Ω du h·ªçc. Nhi·ªám v·ª•:
1. C·∫≠p nh·∫≠t ti·∫øn ƒë·ªô gi·∫•y t·ªù
2. Khuy·∫øn kh√≠ch v√† ƒë·ªông vi√™n
3. H∆∞·ªõng d·∫´n b∆∞·ªõc ti·∫øp theo
4. Nh·∫Øc nh·ªü gi·∫•y t·ªù quan tr·ªçng

Phong c√°ch: H·ªó tr·ª£, khuy·∫øn kh√≠ch, h∆∞·ªõng d·∫´n r√µ r√†ng
Ng√¥n ng·ªØ: Ti·∫øng Vi·ªát
ƒê·ªô d√†i: 3-5 c√¢u

C·∫≠p nh·∫≠t gi·∫•y t·ªù: ${JSON.stringify(documentUpdate)}
Ti·∫øn ƒë·ªô hi·ªán t·∫°i: ${JSON.stringify(progress)}

H√£y t·∫°o ph·∫£n h·ªìi ƒë·ªông vi√™n v√† h∆∞·ªõng d·∫´n ti·∫øp theo.
`;

        return await this.generateAIResponse(systemPrompt, userMessage);
    }

    private async generateGeneralResponse(userMessage: string, phase: string, context?: any): Promise<string> {
        const systemPrompt = `
B·∫°n l√† AI Agent t∆∞ v·∫•n du h·ªçc Scholar AI. Nhi·ªám v·ª•:
1. Tr·∫£ l·ªùi c√¢u h·ªèi c·ªßa ng∆∞·ªùi d√πng
2. Cung c·∫•p th√¥ng tin h·ªØu √≠ch
3. H∆∞·ªõng d·∫´n b∆∞·ªõc ti·∫øp theo
4. Gi·ªØ ng·ªØ c·∫£nh h·ªôi tho·∫°i

Phong c√°ch: Th√¢n thi·ªán, h·ªØu √≠ch, chuy√™n nghi·ªáp
Ng√¥n ng·ªØ: Ti·∫øng Vi·ªát
ƒê·ªô d√†i: 2-4 c√¢u

Giai ƒëo·∫°n hi·ªán t·∫°i: ${phase}
Context: ${JSON.stringify(context)}

H√£y tr·∫£ l·ªùi c√¢u h·ªèi m·ªôt c√°ch t·ª± nhi√™n v√† h·ªØu √≠ch.
`;

        return await this.generateAIResponse(systemPrompt, userMessage);
    }
}
